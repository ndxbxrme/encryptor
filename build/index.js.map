{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "AAAA;EAAA;AAAA,MAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,EAAA,EAAA,GAAA,EAAA;;EAEA,MAAA,GAAS,OAAA,CAAQ,QAAR;;EAET,SAAA,GAAY;;EACZ,GAAA,GAAM,MAAM,CAAC,KAAP,CAAa,EAAb;;EACN,EAAA,GAAK,MAAM,CAAC,KAAP,CAAa,EAAb,EAAiB,CAAjB;;EAEL,WAAA,GAAc,QAAA,CAAC,QAAD,CAAA;WACZ,GAAA,GAAM,MAAM,CAAC,MAAP,CAAc,CAAC,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAD,CAAd,EAAuC,GAAG,CAAC,MAA3C;EADM;;EAEd,OAAA,GAAU,QAAA,CAAC,IAAD,CAAA;WACR,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;AACV,UAAA,MAAA,EAAA;MAAA,MAAA,GAAS,MAAM,CAAC,cAAP,CAAsB,SAAtB,EAAiC,GAAjC,EAAsC,EAAtC;MACT,SAAA,GAAY;MACZ,MAAM,CAAC,EAAP,CAAU,UAAV,EAAsB,QAAA,CAAA,CAAA;AACpB,YAAA,KAAA,EAAA;QAAA,KAAA,GAAQ;AACR;eAAM,IAAA,KAAU,CAAC,KAAA,GAAQ,MAAM,CAAC,IAAP,CAAA,CAAT,CAAhB;uBACE,SAAA,IAAa,KAAK,CAAC,QAAN,CAAe,KAAf;QADf,CAAA;;MAFoB,CAAtB;MAIA,MAAM,CAAC,EAAP,CAAU,KAAV,EAAiB,QAAA,CAAA,CAAA;eACf,OAAA,CAAQ,SAAR;MADe,CAAjB;MAEA,MAAM,CAAC,KAAP,CAAa,IAAb;aACA,MAAM,CAAC,GAAP,CAAA;IAVU,CAAZ;EADQ;;EAYV,OAAA,GAAU,QAAA,CAAC,IAAD,CAAA;WACR,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;AACV,UAAA,QAAA,EAAA;MAAA,QAAA,GAAW,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,GAAnC,EAAwC,EAAxC;MACX,SAAA,GAAY;MACZ,QAAQ,CAAC,EAAT,CAAY,UAAZ,EAAwB,QAAA,CAAA,CAAA;AACtB,YAAA,KAAA,EAAA;QAAA,KAAA,GAAQ;AACR;eAAM,IAAA,KAAU,CAAC,KAAA,GAAQ,QAAQ,CAAC,IAAT,CAAA,CAAT,CAAhB;uBACE,SAAA,IAAa,KAAK,CAAC,QAAN,CAAe,MAAf;QADf,CAAA;;MAFsB,CAAxB;MAIA,QAAQ,CAAC,EAAT,CAAY,KAAZ,EAAmB,QAAA,CAAA,CAAA;eACjB,OAAA,CAAQ,SAAR;MADiB,CAAnB;MAEA,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,KAArB;aACA,QAAQ,CAAC,GAAT,CAAA;IAVU,CAAZ;EADQ;;EAaV,MAAM,CAAC,OAAP,GACE;IAAA,WAAA,EAAa,WAAb;IACA,OAAA,EAAS,OADT;IAEA,OAAA,EAAS;EAFT;AApCF",
  "sourcesContent": [
    "'use strict'\r\n\r\ncrypto = require 'crypto'\r\n\r\nalgorithm = 'aes-256-ctr'\r\nkey = Buffer.alloc 32\r\niv = Buffer.alloc(16, 0)\r\n\r\nsetPassword = (password) ->\r\n  key = Buffer.concat [Buffer.from(password)], key.length\r\nencrypt = (text) ->\r\n  new Promise (resolve, reject) ->\r\n    cipher = crypto.createCipheriv algorithm, key, iv\r\n    encrypted = ''\r\n    cipher.on 'readable', ->\r\n      chunk = null\r\n      while null isnt (chunk = cipher.read())\r\n        encrypted += chunk.toString 'hex'\r\n    cipher.on 'end', ->\r\n      resolve encrypted\r\n    cipher.write text\r\n    cipher.end()\r\ndecrypt = (text) ->\r\n  new Promise (resolve, reject) ->\r\n    decipher = crypto.createDecipheriv algorithm, key, iv\r\n    encrypted = ''\r\n    decipher.on 'readable', ->\r\n      chunk = null\r\n      while null isnt (chunk = decipher.read())\r\n        encrypted += chunk.toString 'utf8'\r\n    decipher.on 'end', ->\r\n      resolve encrypted\r\n    decipher.write text, 'hex'\r\n    decipher.end()\r\n\r\nmodule.exports =\r\n  setPassword: setPassword\r\n  encrypt: encrypt\r\n  decrypt: decrypt"
  ]
}